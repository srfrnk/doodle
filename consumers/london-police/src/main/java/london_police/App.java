/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package london_police;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Map;
import org.apache.beam.runners.direct.DirectOptions;
import org.apache.beam.runners.direct.DirectRunner;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import common.Elasticsearch;

public class App {
    private static final Logger LOG = LoggerFactory.getLogger(App.class);
    public static String apiPoliceUrl = "https://data.police.uk/api";
    public static String elasticSearchUrl = "http://localhost:9200";

    public static void main(String[] args) throws URISyntaxException, IOException {
        if (args.length < 1) {
            LOG.error("Either 'boundaries' or 'crimes' must be specified in args.");
        } else {
            DirectOptions options = PipelineOptionsFactory.create().as(DirectOptions.class);
            options.setRunner(DirectRunner.class);
            options.setTargetParallelism(20);
            Pipeline p = Pipeline.create(options);
            switch (args[0]) {
                case "boundaries":
                    Elasticsearch.deleteIndex("neighbourhood_boundaries", elasticSearchUrl);
                    Elasticsearch.mapIndex("neighbourhood_boundaries",
                            Map.ofEntries(Map.entry("center", "geo_point"),
                                    Map.entry("geoShape", "geo_shape")),
                            elasticSearchUrl);

                    p.apply(new UpdateNeighbourhoodBoundaries(App.apiPoliceUrl, elasticSearchUrl));
                    break;
                case "crimes":
                    Elasticsearch.deleteIndex("crimes", elasticSearchUrl);
                    Elasticsearch.mapIndex("crimes",
                            Map.ofEntries(Map.entry("location", "geo_point")), elasticSearchUrl);

                    p.apply(new UpdateCrimes(App.apiPoliceUrl, elasticSearchUrl));
                    break;
            }
            p.run().waitUntilFinish();
        }

    }
}
