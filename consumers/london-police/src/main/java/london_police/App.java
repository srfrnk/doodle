/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package london_police;

import org.apache.beam.runners.direct.DirectOptions;
import org.apache.beam.runners.direct.DirectRunner;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.Create;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.transforms.Sample;
import org.apache.beam.sdk.values.PCollection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {
    private static final Logger LOG = LoggerFactory.getLogger(App.class);
    public static String apiPoliceUrl = "https://data.police.uk/api";

    public static void main(String[] args) {
        DirectOptions options = PipelineOptionsFactory.create().as(DirectOptions.class);
        options.setRunner(DirectRunner.class);

        Pipeline p = Pipeline.create(options);

        PCollection<String> start = p.apply(Create.of(""));

        PCollection<ForceResponse> forces = start.apply(new ReadForces(App.apiPoliceUrl));
        forces = forces.apply(Sample.any(1));

        PCollection<Neighbourhood> neighbourhoods =
                forces.apply(new ReadNeighbourhoods(App.apiPoliceUrl));
        neighbourhoods = neighbourhoods.apply(Sample.any(1));

        PCollection<Boundry> boundries = neighbourhoods.apply(new ReadBoundries(App.apiPoliceUrl));
        PCollection<CrimeResponse> crimes = boundries.apply(new ReadCrimes(App.apiPoliceUrl));

        crimes.apply(ParDo.of(new DoFn<CrimeResponse, Void>() {
            private static final long serialVersionUID = 1L;

            @ProcessElement
            public void processElement(@Element CrimeResponse input) {
                LOG.info(Json.format(input));
            }
        }));

        p.run().waitUntilFinish();
    }
}
